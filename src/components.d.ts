/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';


declare global {

  namespace StencilComponents {
    interface CpMain {

    }
  }

  interface HTMLCpMainElement extends StencilComponents.CpMain, HTMLStencilElement {}

  var HTMLCpMainElement: {
    prototype: HTMLCpMainElement;
    new (): HTMLCpMainElement;
  };
  interface HTMLElementTagNameMap {
    'cp-main': HTMLCpMainElement;
  }
  interface ElementTagNameMap {
    'cp-main': HTMLCpMainElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cp-main': JSXElements.CpMainAttributes;
    }
  }
  namespace JSXElements {
    export interface CpMainAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface CpStories {
      'stories': Object;
    }
  }

  interface HTMLCpStoriesElement extends StencilComponents.CpStories, HTMLStencilElement {}

  var HTMLCpStoriesElement: {
    prototype: HTMLCpStoriesElement;
    new (): HTMLCpStoriesElement;
  };
  interface HTMLElementTagNameMap {
    'cp-stories': HTMLCpStoriesElement;
  }
  interface ElementTagNameMap {
    'cp-stories': HTMLCpStoriesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cp-stories': JSXElements.CpStoriesAttributes;
    }
  }
  namespace JSXElements {
    export interface CpStoriesAttributes extends HTMLAttributes {
      'stories'?: Object;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CpStory {
      'story': Function;
    }
  }

  interface HTMLCpStoryElement extends StencilComponents.CpStory, HTMLStencilElement {}

  var HTMLCpStoryElement: {
    prototype: HTMLCpStoryElement;
    new (): HTMLCpStoryElement;
  };
  interface HTMLElementTagNameMap {
    'cp-story': HTMLCpStoryElement;
  }
  interface ElementTagNameMap {
    'cp-story': HTMLCpStoryElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cp-story': JSXElements.CpStoryAttributes;
    }
  }
  namespace JSXElements {
    export interface CpStoryAttributes extends HTMLAttributes {
      'story'?: Function;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface OkButton {
      'disabled': boolean;
      'flag': string;
      'ghost': boolean;
      'label': string;
    }
  }

  interface HTMLOkButtonElement extends StencilComponents.OkButton, HTMLStencilElement {}

  var HTMLOkButtonElement: {
    prototype: HTMLOkButtonElement;
    new (): HTMLOkButtonElement;
  };
  interface HTMLElementTagNameMap {
    'ok-button': HTMLOkButtonElement;
  }
  interface ElementTagNameMap {
    'ok-button': HTMLOkButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ok-button': JSXElements.OkButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface OkButtonAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'flag'?: string;
      'ghost'?: boolean;
      'label'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface OkToggle {
      'disabled': boolean;
    }
  }

  interface HTMLOkToggleElement extends StencilComponents.OkToggle, HTMLStencilElement {}

  var HTMLOkToggleElement: {
    prototype: HTMLOkToggleElement;
    new (): HTMLOkToggleElement;
  };
  interface HTMLElementTagNameMap {
    'ok-toggle': HTMLOkToggleElement;
  }
  interface ElementTagNameMap {
    'ok-toggle': HTMLOkToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ok-toggle': JSXElements.OkToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface OkToggleAttributes extends HTMLAttributes {
      'disabled'?: boolean;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
